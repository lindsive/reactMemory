{"ast":null,"code":"// import components\nimport React, { Component } from \"react\";\nimport Planets from \"../Planets\";\nimport Title from \"../Title\";\nimport Wrapper from \"../Wrapper\";\nimport data from \"./planets.json.js\";\n\nclass Functionality extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data,\n      score: 0,\n      totalScore: 0\n    };\n\n    this.correctGuess = addData => {\n      let _this$state = this.state,\n          score = _this$state.score,\n          totalScore = _this$state.totalScore;\n      let newScore = score + 1;\n      let newTotalScore = Math.max(newScore, totalScore);\n      this.setState({\n        data: this.randomize(addData),\n        score: newScore,\n        totalScore: newTotalScore\n      });\n    };\n\n    this.randomize = data => {\n      for (let i = data.length - 1; i > 0; i--) {\n        let j = Math.floor(Math.random() * i + 1);\n        let tempArr = data[i];\n        data[i] = data[j];\n        data[j] = tempArr;\n      }\n\n      return data;\n    };\n\n    this.checkGuess = id => {// let correctGuess = false;\n      // let counts = []\n      // let ? = this.state.data.map(...id) {\n      // }\n      // or\n      // this.props.id.map((data, index) => {\n      // if(counts[data.id[i]] === undefined) {\n      //counts[data.[i]] = 1;\n      // return true;\n      // } else {\n      // this.state.randomize(data)\n      //  \n      //}\n      // }\n      // translate for loop to map()??\n      // for (let i = 0; i <= data.id.length; i++) {\n      // if(counts[data.id[i]] === undefined) {\n      //counts[data.[i]] = 1;\n      // } else {\n      //   return true;\n      //}\n      //}\n      // return false;\n    };\n  }\n\n  componentDidMount() {}\n\n}\n\nexport default Functionality;","map":{"version":3,"sources":["/Users/lindsayiveson/Desktop/react-memory/src/components/Game/app.js"],"names":["React","Component","Planets","Title","Wrapper","data","Functionality","state","score","totalScore","correctGuess","addData","newScore","newTotalScore","Math","max","setState","randomize","i","length","j","floor","random","tempArr","checkGuess","id","componentDidMount"],"mappings":"AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;;AAEA,MAAMC,aAAN,SAA4BL,SAA5B,CAAsC;AAAA;AAAA;AAAA,SAElCM,KAFkC,GAE1B;AACJF,MAAAA,IADI;AAEJG,MAAAA,KAAK,EAAE,CAFH;AAGJC,MAAAA,UAAU,EAAE;AAHR,KAF0B;;AAAA,SAYlCC,YAZkC,GAYlBC,OAAD,IAAa;AAAA,wBACI,KAAKJ,KADT;AAAA,UAClBC,KADkB,eAClBA,KADkB;AAAA,UACXC,UADW,eACXA,UADW;AAExB,UAAIG,QAAQ,GAAGJ,KAAK,GAAG,CAAvB;AACA,UAAIK,aAAa,GAAGC,IAAI,CAACC,GAAL,CAASH,QAAT,EAAmBH,UAAnB,CAApB;AAEA,WAAKO,QAAL,CAAc;AACVX,QAAAA,IAAI,EAAE,KAAKY,SAAL,CAAeN,OAAf,CADI;AAEVH,QAAAA,KAAK,EAAEI,QAFG;AAGVH,QAAAA,UAAU,EAAEI;AAHF,OAAd;AAMH,KAvBiC;;AAAA,SAyBlCI,SAzBkC,GAyBrBZ,IAAD,IAAU;AAClB,WAAK,IAAIa,CAAC,GAAGb,IAAI,CAACc,MAAL,GAAc,CAA3B,EAA8BD,CAAC,GAAG,CAAlC,EAAqCA,CAAC,EAAtC,EAA0C;AACtC,YAAIE,CAAC,GAAGN,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACQ,MAAL,KAAgBJ,CAAhB,GAAoB,CAA/B,CAAR;AACA,YAAIK,OAAO,GAAGlB,IAAI,CAACa,CAAD,CAAlB;AACAb,QAAAA,IAAI,CAACa,CAAD,CAAJ,GAAUb,IAAI,CAACe,CAAD,CAAd;AACAf,QAAAA,IAAI,CAACe,CAAD,CAAJ,GAAUG,OAAV;AACH;;AACD,aAAOlB,IAAP;AACH,KAjCiC;;AAAA,SAmClCmB,UAnCkC,GAmCpBC,EAAD,IAAQ,CACjB;AACA;AACA;AAEA;AAEA;AAEA;AAEI;AACA;AACA;AACA;AACI;AACJ;AACA;AAGJ;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,KAtEiC;AAAA;;AAQlCC,EAAAA,iBAAiB,GAAG,CAEnB;;AAViC;;AA4EtC,eAAepB,aAAf","sourcesContent":["// import components\nimport React, { Component } from \"react\";\nimport Planets from \"../Planets\";\nimport Title from \"../Title\";\nimport Wrapper from \"../Wrapper\";\nimport data from \"./planets.json.js\";\n\nclass Functionality extends Component {\n    // set initial state\n    state = {\n        data,\n        score: 0,\n        totalScore: 0\n    }\n\n    componentDidMount() {\n\n    }\n\n    correctGuess = (addData) => {\n        let { score, totalScore } = this.state;\n        let newScore = score + 1;\n        let newTotalScore = Math.max(newScore, totalScore);\n\n        this.setState({\n            data: this.randomize(addData),\n            score: newScore,\n            totalScore: newTotalScore\n        });\n\n    }\n\n    randomize = (data) => {\n        for (let i = data.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * i + 1);\n            let tempArr = data[i];\n            data[i] = data[j];\n            data[j] = tempArr;\n        }\n        return data;\n    }\n\n    checkGuess = (id) => {\n        // let correctGuess = false;\n        // let counts = []\n        // let ? = this.state.data.map(...id) {\n\n        // }\n\n        // or\n\n        // this.props.id.map((data, index) => {\n          \n            // if(counts[data.id[i]] === undefined) {\n            //counts[data.[i]] = 1;\n            // return true;\n            // } else {\n                // this.state.randomize(data)\n            //  \n            //}\n            \n\n        // }\n\n        \n\n\n        // translate for loop to map()??\n\n        // for (let i = 0; i <= data.id.length; i++) {\n        // if(counts[data.id[i]] === undefined) {\n        //counts[data.[i]] = 1;\n        // } else {\n        //   return true;\n        //}\n        //}\n        // return false;\n    }\n\n\n\n}\n\nexport default Functionality;"]},"metadata":{},"sourceType":"module"}